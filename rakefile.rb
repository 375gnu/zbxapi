#License:: GPL 2.0  http://www.gnu.org/licenses/gpl-2.0.html
#Copyright:: Copyright (C) 2009,2010 Andrew Nelson nelsonab(at)red-tux(dot)net
#
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

##########################################
# Subversion information
# $Id$
# $Revision$
##########################################

require 'rubygems'
require 'rake'
require 'rdoc/task'
require 'rubygems/package_task'
require 'rake/testtask'

#setup our search path or libraries
$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), '.'))

task :default => [:get_release, :test, :package, :create_release]

desc "Build a version of the Gem, but do not update version file or perform git changes"
task :test_build do
  ENV["test_build"]=true
end

Rake::TestTask.new do |t|
  require "ts_local_vars"
  t.test_files = FileList['api_tests/tc*.rb']
  t.verbose = true
end

desc "Skip the unit tests"
task :skip_tests do
  Rake::Task[:test].clear
end

spec = Gem::Specification.new do |s|
  s.name = %q{zbxapi}
  s.rubyforge_project = "zbxapi"
  s.version = "#{ENV["release_ver"]}"
  s.authors = ["A. Nelson"]
  s.email = %q{nelsonab@red-tux.net}
  s.summary = %q{Ruby wrapper to the Zabbix API}
  s.homepage = %q{http://trac.red-tux.net/}
  s.description = %q{Provides a straight forward interface to manipulate Zabbix servers using the Zabbix API.}
  s.licenses = "LGPL 2.1"
  s.requirements = "Requires json"
  s.add_dependency('json')
  s.require_paths =["."]
  s.files =
    ["LICENSE", "zbxapi.rb", "zbxapi/zdebug.rb", "zbxapi/api_exceptions.rb",
     "zbxapi/exceptions.rb", "zbxapi/utils.rb", "zbxapi/result.rb",
     "api_classes/api_dsl.rb",
#     "zbxapi/revision.rb",
     Dir["api_classes/dsl*.rb"]].flatten
end


desc 'Get the last revision tag, override with ENV["release_ver"]'
task :get_release do
  if ENV["release_ver"].nil?
    revs=`git tag -l 'rev*' | sort -t. -k1,1n -k2,2n -k3,3n | grep -E '^rev([0-9]+\.){2}[0-9]+$'`
    p revs
    revs=revs.gsub("\r","").gsub("rev","").split("\n")
    if revs.empty?
      fail '****  No release tags found, and ENV["release_ver"] is empty  ****'
    end
    puts "Last Release version found: #{revs[-1]}"
    rev=revs[-1]
    rev_parts=rev.split(".").map{ |i| Integer(i)}
    rev_parts[-1]+=1

    ENV["release_ver"]=rev_parts.join(".")
  else
    puts 'Release version was passed in via ENV["release_ver"]'
  end
  puts "Using \"#{ENV["release_ver"]}\" for gem version"
end

desc "Create release number and git tag"
task :create_release do
  cmd = "git tag -a rev#{ENV["release_ver"]} -m \"Release version: #{ENV["release_ver"]}\""
  if ENV["test_build"]
    puts "Test mode enabled, the following command would have been executed:"
    puts cmd
  else
    puts "Creating git release tag"
    puts cmd
    `#{cmd}`
  end
end

desc "Update the revision to the release number"
task :update_revision do
  if ENV["test_build"]
    puts "Test mode emabled, zbxapi/revision.rb file will not be generated"
  else
    open("zbxapi/revision.rb", "w") do |o|
      o.puts "#CHANGES TO THIS FILE WILL AUTOMATICALLY BE OVERWRITTEN"
      o.puts "#This file is autogenerated by the zbxapi rakefile."
      o.puts "#This file contains the latest SVN revision number at the time"
      o.puts "#the rakefile was run"
      o.puts
      o.puts "ZBXAPI_VERSION=\"#{ENV["release_ver"]}\""
#    o.puts "ZBXAPI_REVISION=\"#{$rev}\""
    end
  end
end

Gem::PackageTask.new(spec) do |pkg|
  pkg.package_dir = "gems"
#  pkg.version = "0.1.#{$rev}"
end
